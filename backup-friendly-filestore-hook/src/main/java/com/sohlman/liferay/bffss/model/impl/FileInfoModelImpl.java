package com.sohlman.liferay.bffss.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sohlman.liferay.bffss.model.FileInfo;
import com.sohlman.liferay.bffss.model.FileInfoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FileInfo service. Represents a row in the &quot;bffss_FileInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sohlman.liferay.bffss.model.FileInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FileInfoImpl
 * @see com.sohlman.liferay.bffss.model.FileInfo
 * @see com.sohlman.liferay.bffss.model.FileInfoModel
 * @generated
 */
public class FileInfoModelImpl extends BaseModelImpl<FileInfo>
    implements FileInfoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a file info model instance should use the {@link com.sohlman.liferay.bffss.model.FileInfo} interface instead.
     */
    public static final String TABLE_NAME = "bffss_FileInfo";
    public static final Object[][] TABLE_COLUMNS = {
            { "fileInfoId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "repositoryId", Types.BIGINT },
            { "path_", Types.VARCHAR },
            { "version", Types.VARCHAR },
            { "fileDataId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table bffss_FileInfo (fileInfoId LONG not null primary key,companyId LONG,repositoryId LONG,path_ VARCHAR(75) null,version VARCHAR(75) null,fileDataId LONG)";
    public static final String TABLE_SQL_DROP = "drop table bffss_FileInfo";
    public static final String ORDER_BY_JPQL = " ORDER BY fileInfo.version DESC";
    public static final String ORDER_BY_SQL = " ORDER BY bffss_FileInfo.version DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sohlman.liferay.bffss.model.FileInfo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sohlman.liferay.bffss.model.FileInfo"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sohlman.liferay.bffss.model.FileInfo"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long FILEDATAID_COLUMN_BITMASK = 2L;
    public static long PATH_COLUMN_BITMASK = 4L;
    public static long REPOSITORYID_COLUMN_BITMASK = 8L;
    public static long VERSION_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sohlman.liferay.bffss.model.FileInfo"));
    private static ClassLoader _classLoader = FileInfo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FileInfo.class
        };
    private long _fileInfoId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _repositoryId;
    private long _originalRepositoryId;
    private boolean _setOriginalRepositoryId;
    private String _path;
    private String _originalPath;
    private String _version;
    private String _originalVersion;
    private long _fileDataId;
    private long _originalFileDataId;
    private boolean _setOriginalFileDataId;
    private long _columnBitmask;
    private FileInfo _escapedModel;

    public FileInfoModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _fileInfoId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFileInfoId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fileInfoId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FileInfo.class;
    }

    @Override
    public String getModelClassName() {
        return FileInfo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fileInfoId", getFileInfoId());
        attributes.put("companyId", getCompanyId());
        attributes.put("repositoryId", getRepositoryId());
        attributes.put("path", getPath());
        attributes.put("version", getVersion());
        attributes.put("fileDataId", getFileDataId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long fileInfoId = (Long) attributes.get("fileInfoId");

        if (fileInfoId != null) {
            setFileInfoId(fileInfoId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long repositoryId = (Long) attributes.get("repositoryId");

        if (repositoryId != null) {
            setRepositoryId(repositoryId);
        }

        String path = (String) attributes.get("path");

        if (path != null) {
            setPath(path);
        }

        String version = (String) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        Long fileDataId = (Long) attributes.get("fileDataId");

        if (fileDataId != null) {
            setFileDataId(fileDataId);
        }
    }

    @Override
    public long getFileInfoId() {
        return _fileInfoId;
    }

    @Override
    public void setFileInfoId(long fileInfoId) {
        _fileInfoId = fileInfoId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getRepositoryId() {
        return _repositoryId;
    }

    @Override
    public void setRepositoryId(long repositoryId) {
        _columnBitmask |= REPOSITORYID_COLUMN_BITMASK;

        if (!_setOriginalRepositoryId) {
            _setOriginalRepositoryId = true;

            _originalRepositoryId = _repositoryId;
        }

        _repositoryId = repositoryId;
    }

    public long getOriginalRepositoryId() {
        return _originalRepositoryId;
    }

    @Override
    public String getPath() {
        if (_path == null) {
            return StringPool.BLANK;
        } else {
            return _path;
        }
    }

    @Override
    public void setPath(String path) {
        _columnBitmask |= PATH_COLUMN_BITMASK;

        if (_originalPath == null) {
            _originalPath = _path;
        }

        _path = path;
    }

    public String getOriginalPath() {
        return GetterUtil.getString(_originalPath);
    }

    @Override
    public String getVersion() {
        if (_version == null) {
            return StringPool.BLANK;
        } else {
            return _version;
        }
    }

    @Override
    public void setVersion(String version) {
        _columnBitmask = -1L;

        if (_originalVersion == null) {
            _originalVersion = _version;
        }

        _version = version;
    }

    public String getOriginalVersion() {
        return GetterUtil.getString(_originalVersion);
    }

    @Override
    public long getFileDataId() {
        return _fileDataId;
    }

    @Override
    public void setFileDataId(long fileDataId) {
        _columnBitmask |= FILEDATAID_COLUMN_BITMASK;

        if (!_setOriginalFileDataId) {
            _setOriginalFileDataId = true;

            _originalFileDataId = _fileDataId;
        }

        _fileDataId = fileDataId;
    }

    public long getOriginalFileDataId() {
        return _originalFileDataId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            FileInfo.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public FileInfo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FileInfo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FileInfoImpl fileInfoImpl = new FileInfoImpl();

        fileInfoImpl.setFileInfoId(getFileInfoId());
        fileInfoImpl.setCompanyId(getCompanyId());
        fileInfoImpl.setRepositoryId(getRepositoryId());
        fileInfoImpl.setPath(getPath());
        fileInfoImpl.setVersion(getVersion());
        fileInfoImpl.setFileDataId(getFileDataId());

        fileInfoImpl.resetOriginalValues();

        return fileInfoImpl;
    }

    @Override
    public int compareTo(FileInfo fileInfo) {
        int value = 0;

        value = getVersion().compareTo(fileInfo.getVersion());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FileInfo)) {
            return false;
        }

        FileInfo fileInfo = (FileInfo) obj;

        long primaryKey = fileInfo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FileInfoModelImpl fileInfoModelImpl = this;

        fileInfoModelImpl._originalCompanyId = fileInfoModelImpl._companyId;

        fileInfoModelImpl._setOriginalCompanyId = false;

        fileInfoModelImpl._originalRepositoryId = fileInfoModelImpl._repositoryId;

        fileInfoModelImpl._setOriginalRepositoryId = false;

        fileInfoModelImpl._originalPath = fileInfoModelImpl._path;

        fileInfoModelImpl._originalVersion = fileInfoModelImpl._version;

        fileInfoModelImpl._originalFileDataId = fileInfoModelImpl._fileDataId;

        fileInfoModelImpl._setOriginalFileDataId = false;

        fileInfoModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<FileInfo> toCacheModel() {
        FileInfoCacheModel fileInfoCacheModel = new FileInfoCacheModel();

        fileInfoCacheModel.fileInfoId = getFileInfoId();

        fileInfoCacheModel.companyId = getCompanyId();

        fileInfoCacheModel.repositoryId = getRepositoryId();

        fileInfoCacheModel.path = getPath();

        String path = fileInfoCacheModel.path;

        if ((path != null) && (path.length() == 0)) {
            fileInfoCacheModel.path = null;
        }

        fileInfoCacheModel.version = getVersion();

        String version = fileInfoCacheModel.version;

        if ((version != null) && (version.length() == 0)) {
            fileInfoCacheModel.version = null;
        }

        fileInfoCacheModel.fileDataId = getFileDataId();

        return fileInfoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{fileInfoId=");
        sb.append(getFileInfoId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", repositoryId=");
        sb.append(getRepositoryId());
        sb.append(", path=");
        sb.append(getPath());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", fileDataId=");
        sb.append(getFileDataId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.sohlman.liferay.bffss.model.FileInfo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fileInfoId</column-name><column-value><![CDATA[");
        sb.append(getFileInfoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>repositoryId</column-name><column-value><![CDATA[");
        sb.append(getRepositoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>path</column-name><column-value><![CDATA[");
        sb.append(getPath());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileDataId</column-name><column-value><![CDATA[");
        sb.append(getFileDataId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
